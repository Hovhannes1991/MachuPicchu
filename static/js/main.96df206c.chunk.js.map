{"version":3,"sources":["Header/Header.module.css","Footer/Footer.module.css","Header/Header.jsx","Footer/Footer.jsx","Main/myScript.js","Main/Main.jsx","Main/MyStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","header","Footer","footer","clickCount","clickedImages","findedImages","imageClick","event","target","status","classList","add","push","src","setTimeout","alert","remove","images","map","el","MainItems","key","i","alt","onClick","concat","sort","Math","random","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,OAAS,yB,iMCWZC,EARA,WACX,OACI,4BAAQC,UAAWC,IAAOC,QACtB,mD,gBCKGC,EARA,WACX,OACI,4BAAQH,UAAWC,IAAOG,QACtB,4CCPRC,G,MAAa,GACbC,EAAgB,GAChBC,EAAe,EA2CJC,MAxCf,SAAoBC,GACE,IAAfJ,GACwB,SAAxBI,EAAMC,OAAOC,SAIZF,EAAMC,OAAOE,UAAUC,IAAI,QAC3BJ,EAAMC,OAAOC,OAAS,OACtBN,IACAC,EAAcQ,KAAKL,EAAMC,QACP,IAAfL,IAQJC,EAAc,GAAGS,MAAQT,EAAc,GAAGS,KAEzCT,EAAgB,GAChBD,EAAa,EACO,MAHpBE,GAAgB,IAIZS,YAAY,WACRC,MAAM,aACP,MAIPD,YAAY,WACRV,EAAc,GAAGM,UAAUM,OAAO,QAClCZ,EAAc,GAAGM,UAAUM,OAAO,QAClCZ,EAAc,GAAGK,OAAS,GAC1BL,EAAc,GAAGK,OAAS,GAC1BL,EAAgB,GAChBD,EAAa,IACd,QCpCPc,ECLY,CAAC,UAAW,eAAgB,WAAY,gBAAiB,aACxD,YAAa,WAAY,YAAa,YAAa,WAAY,YAC/D,aAAc,YAAa,YAAa,uBDGpCC,KAAI,SAACC,GACtB,MAAM,UAAN,OAAiBA,MAWrB,SAASC,IACL,IAAIC,EAAM,EACV,OACIJ,EAAOC,KAAI,SAASI,GAEhB,OADAD,IAEI,yBAAKA,IAAKA,EAAKvB,UAAU,aAAY,yBAAKe,IAAKS,EAAGC,IAAI,YACrDzB,UAAU,SAAS0B,QAASlB,SAf7CW,EAASA,EAAOQ,OAAOR,IAGhBS,MAAM,WACT,OAAOC,KAAKC,SAAW,MAiB3B,IASeC,EATF,WACT,OACI,yBAAK/B,UAAU,QACX,kBAACsB,EAAD,QEjBGU,MAVf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.96df206c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Ky3mr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__2aXhX\"};","import React from 'react';\r\nimport styles from './Header.module.css';\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <h1>Match The Picture</h1>\r\n        </header>        \r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styles from './Footer.module.css';\r\n\r\n\r\nconst Footer = () => {\r\n    return(\r\n        <footer className={styles.footer}>\r\n            <p>I'am footer</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","let clickCount = 0;\r\nlet clickedImages = [];\r\nlet findedImages = 0;\r\n\r\n\r\nfunction imageClick(event){\r\n    if(clickCount === 2) { return }\r\n    if(event.target.status === 'show'){\r\n        return;\r\n    }\r\n    else{\r\n        event.target.classList.add('show');\r\n        event.target.status = 'show';\r\n        clickCount++;\r\n        clickedImages.push(event.target);\r\n        if(clickCount === 2){\r\n            checkImages();\r\n        }\r\n    }\r\n}\r\n    \r\n    \r\nfunction checkImages(){\r\n    if(clickedImages[0].src === clickedImages[1].src){\r\n        findedImages += 2;\r\n        clickedImages = [];\r\n        clickCount = 0;\r\n        if(findedImages === 30) {\r\n            setTimeout( () => {\r\n                alert('You win')\r\n            }, 500)\r\n        }\r\n    }\r\n    else{\r\n        setTimeout( () => {\r\n            clickedImages[0].classList.remove('show');\r\n            clickedImages[1].classList.remove('show');\r\n            clickedImages[0].status = '';\r\n            clickedImages[1].status = '';\r\n            clickedImages = [];\r\n            clickCount = 0;\r\n        }, 500)\r\n    }\r\n}\r\n\r\nexport default imageClick;","import React from 'react';\r\nimport './Main.css';\r\nimport MyStore from './MyStore';\r\nimport imageClick from './myScript';\r\n\r\nlet images = MyStore.map((el) => {\r\n    return `images/${el}`;    \r\n})\r\n\r\nimages = images.concat(images);\r\n\r\n\r\nimages.sort( () => {\r\n    return Math.random() - 0.5;\r\n})\r\n\r\n\r\nfunction MainItems(){\r\n    let key = 0;\r\n    return(\r\n        images.map(function(i){\r\n            key++;\r\n            return(\r\n                <div key={key} className='grid_item'><img src={i} alt=\"not found\"\r\n                 className='hidden' onClick={imageClick} /></div>\r\n            )            \r\n        })\r\n    )\r\n}\r\n\r\nconst Main = () => {\r\n    return(\r\n        <div className='main'>\r\n            <MainItems />            \r\n        </div>       \r\n    )\r\n}\r\n\r\n\r\nexport default Main;","const MyStore = ['car.png', 'elephant.png', 'flag.png', 'gold-fish.png', 'minion.png',\r\n                 'ninja.png', 'palm.png', 'panda.png', 'shark.png', 'ship.png', 'phone.png', \r\n                 'thread.png', 'truck.png', 'whell.png', 'white-blue-fish.png'];\r\n\r\n\r\n\r\nexport default MyStore;","import React from 'react';\nimport './App.css';\nimport Header from './Header/Header';\nimport Footer from './Footer/Footer';\nimport Main from './Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}